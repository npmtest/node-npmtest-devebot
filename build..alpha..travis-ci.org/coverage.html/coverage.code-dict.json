{"/home/travis/build/npmtest/node-npmtest-devebot/test.js":"/* istanbul instrument in package npmtest_devebot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-devebot/lib.npmtest_devebot.js":"/* istanbul instrument in package npmtest_devebot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_devebot = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_devebot = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-devebot/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-devebot && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_devebot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_devebot\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_devebot.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_devebot.rollup.js'] =\n            local.assetsDict['/assets.npmtest_devebot.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_devebot.__dirname + '/lib.npmtest_devebot.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/index.js":"'use strict';\n\nvar path = require('path');\nvar lodash = require('lodash');\n\nvar appinfoLoader = require('./lib/backbone/appinfo-loader.js');\nvar configLoader = require('./lib/backbone/config-loader.js');\nvar Server = require('./lib/server.js');\nvar debug = require('./lib/utils/debug.js');\nvar debuglog = debug('devebot');\n\nfunction appLoader(params) {\n  params = params || {};\n\n  debuglog.isEnabled && debuglog(' * devebot is started with parameters: %s', JSON.stringify(params, null, 2));\n\n  var appRootPath = params.appRootPath;\n  var libRootPaths = lodash.map(params.pluginRefs, function(pluginRef) {\n    return path.dirname(pluginRef.path);\n  });\n  var topRootPath = __dirname;\n\n  var appinfo = appinfoLoader(appRootPath, libRootPaths, topRootPath);\n  var appName = params.appName || appinfo.name || 'devebot-application';\n\n  debuglog.isEnabled && debuglog(' - application name (appName): %s', appName);\n\n  var config = configLoader(appName, appRootPath, libRootPaths.concat(topRootPath));\n\n  var appRef = lodash.isEmpty(appRootPath) ? [] : {\n    name: appName,\n    path: path.join(appRootPath, 'app.js')\n  };\n\n  var devebotRef = {\n    name: 'devebot',\n    path: path.join(topRootPath, 'index.js')\n  };\n\n  config.appName = appName;\n  config.appinfo = appinfo;\n  config.bridgeRefs = lodash.values(params.bridgeRefs);\n  config.pluginRefs = [].concat(appRef, lodash.values(params.pluginRefs), devebotRef);\n\n  return {\n    config: config,\n    server: Server(config)\n  };\n}\n\nvar ATTRS = ['libRootPaths', 'pluginRefs', 'bridgeRefs'];\n\nfunction registerLayerware(layerRootPath, pluginNames, bridgeNames) {\n  if ((arguments.length < 3) && lodash.isArray(layerRootPath)) {\n    bridgeNames = pluginNames;\n    pluginNames = layerRootPath;\n    layerRootPath = null;\n  }\n\n  var initialize = function(layerRootPath, pluginNames, bridgeNames, context) {\n    context = context || {};\n    if (typeof(layerRootPath) == 'string' && layerRootPath.length > 0) {\n      context.libRootPaths = context.libRootPaths || [];\n      context.libRootPaths.push(layerRootPath);\n    }\n    return expandExtensions(context, pluginNames, bridgeNames);\n  };\n\n  return initialize.bind(undefined, layerRootPath, pluginNames, bridgeNames);\n}\n\nfunction launchApplication(context, pluginNames, bridgeNames) {\n  if (lodash.isString(context)) {\n    context = { appRootPath: context };\n  }\n  return appLoader(lodash.assign(context, expandExtensions(lodash.omit(context, ATTRS),\n      pluginNames, bridgeNames)));\n}\n\nvar expandExtensions = function (context, pluginNames, bridgeNames) {\n  context = context || {};\n  context = lodash.pick(context, ATTRS);\n\n  context.libRootPaths = context.libRootPaths || [];\n  context.bridgeRefs = context.bridgeRefs || {};\n  context.pluginRefs = context.pluginRefs || {};\n\n  bridgeNames = bridgeNames || [];\n  pluginNames = pluginNames || [];\n\n  bridgeNames = lodash.isArray(bridgeNames) ? bridgeNames : [bridgeNames];\n  pluginNames = lodash.isArray(pluginNames) ? pluginNames : [pluginNames];\n\n  bridgeNames = lodash.difference(bridgeNames, lodash.keys(context.bridgeRefs));\n  pluginNames = lodash.difference(pluginNames, lodash.keys(context.pluginRefs));\n\n  bridgeNames.forEach(function(bridgeName) {\n    context.bridgeRefs[bridgeName] = {\n      name: bridgeName,\n      path: require.resolve(bridgeName)\n    }\n  });\n\n  pluginNames.forEach(function(pluginName) {\n    context.pluginRefs[pluginName] = {\n      name: pluginName,\n      path: require.resolve(pluginName)\n    }\n  });\n\n  var pluginInitializers = lodash.map(pluginNames, function(pluginName) {\n    return require(pluginName);\n  });\n\n  return pluginInitializers.reduce(function(params, pluginInitializer) {\n    return pluginInitializer(params);\n  }, context);\n};\n\nappLoader.registerLayerware = registerLayerware;\nappLoader.launchApplication = launchApplication;\n\nvar builtinPackages = ['bluebird', 'lodash', 'injektor'];\n\nappLoader.require = function(packageName) {\n  if (builtinPackages.indexOf(packageName) >= 0) return require(packageName);\n  if (packageName == 'debug') return debug;\n  if (packageName == 'chores') return require('./lib/utils/chores.js');\n  if (packageName == 'loader') return require('./lib/utils/loader.js');\n  return null;\n};\n\nmodule.exports = appLoader;\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/backbone/appinfo-loader.js":"'use strict';\n\nvar fs = require('fs');\nvar lodash = require('lodash');\nvar constx = require('../utils/constx.js');\nvar debuglog = require('../utils/debug.js')('devebot:appinfoLoader');\n\nfunction appinfoLoader(appRootPath, libRootPaths, botRootPath) {\n  if (debuglog.isEnabled) {\n    debuglog(' + load the application package at: %s', appRootPath);\n    debuglog(' - load the layerware packages at: %s', JSON.stringify(libRootPaths, null, 2));\n    debuglog(' - load the framework package at: %s', botRootPath);\n  }\n\n  var appinfo = loadPkginfo(appRootPath);\n\n  if (!lodash.isArray(libRootPaths)) libRootPaths = [];\n  appinfo.layerware = libRootPaths.map(function(libRootPath) {\n    return loadPkginfo(libRootPath);\n  });\n\n  appinfo.framework = loadPkginfo(botRootPath);\n\n  debuglog.isEnabled && debuglog(' - appinfo object: %s', JSON.stringify(appinfo, null, 2));\n\n  return appinfo;\n}\n\nvar loadPkginfo = function(pkgRootPath) {\n  try {\n    return lodash.pick(JSON.parse(fs.readFileSync(pkgRootPath + '/package.json', 'utf8')),\n      constx.APPINFO.FIELDS);\n  } catch(err) {\n    return {};\n  }\n};\n\nmodule.exports = appinfoLoader;\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/utils/constx.js":"'use strict';\n\nvar constx = {\n  MIME_JSON: 'application/json',\n  APPINFO: {\n    FIELDS: ['version', 'name', 'description', 'homepage', 'author', 'license']\n  },\n  CONFIG: {\n    MUST_SPECIFY_IN_ENV: true\n  },\n  JOB: {\n    MSG_ON_EVENT: {\n      'enqueue': '<%s> * JobEvent <%s>, to <%s>#<%s> the <%s> document',\n      'enqueue_debug': '<%s> * JobEvent <%s>, to <%s>#<%s> the <%s> document <%s>, has been started with parameters: <%s>',\n      'promotion': '<%s> * JobEvent <%s>, to <%s>#<%s> the <%s> document, is promoted (delayed to queued)',\n      'promotion_debug': '<%s> * JobEvent <%s>, to <%s>#<%s> the <%s> document <%s>, has been promoted with parameters: <%s>',\n      'progress': '<%s> + JobEvent <%s>, to <%s>#<%s> the <%s> document <%s>, has been  completed %s%%, with data: <%s>',\n      'failed': '<%s> + JobEvent <%s>, to <%s>#<%s> the <%s> document <%s>, has been failed with error message <%s>',\n      'complete': '<%s> + JobEvent <%s>, to <%s>#<%s> the <%s> document',\n      'complete_debug': '<%s> + JobEvent <%s>, to <%s>#<%s> the <%s> document <%s>, has been completed with result <%s>',\n      'remove': '<%s> * JobEvent <%s>, to <%s>#<%s> the <%s> document, is removed',\n      'remove_debug': '<%s> * JobEvent <%s>, to <%s>#<%s> the <%s> document <%s>, has been removed: <%s>',\n    }\n  },\n  COMMAND: {\n    ROOT_KEY: 'command',\n    SCRIPT_DIR: '/lib/scripts',\n    SCHEMA: {\n      OBJECT: {\n        \"type\": \"object\",\n        \"properties\": {\n          \"info\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"description\": {\n                \"type\": \"string\"\n              },\n              \"options\": {\n                \"type\": \"array\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  RUNHOOK: {\n    ROOT_KEY: 'runhook',\n    SCRIPT_DIR: '/lib/scripts',\n    MSG: {\n      BEGIN: '<%s> + Runhook <%s>, <%s>#<%s> an item of a <%s> document, starting',\n      DATA: '<%s> - Runhook <%s>, <%s>#<%s> the item <%s> document: %s',\n      RESULT: '<%s> - Runhook <%s>, <%s>#<%s> the item <%s> document, result: %s',\n      ERROR: '<%s> - Runhook <%s>, <%s>#<%s> the item <%s> document <%s>, error: %s',\n      END: '<%s> - Runhook <%s>, <%s>#<%s> the item <%s> document, finish',\n      NOOP: '<%s> - Runhook <%s>, <%s>#<%s> the item <%s> document: operation is not defined'\n    }\n  },\n  SERVICE: {\n    ROOT_KEY: 'service',\n    SCRIPT_DIR: '/lib/services'\n  },\n  TRIGGER: {\n    ROOT_KEY: 'trigger',\n    SCRIPT_DIR: '/lib/triggers'\n  },\n  WEBSOCKET: {\n    STATE: {\n      STARTED: 'enqueue',\n      PROMOTION: 'promotion',\n      PROGRESS: 'progress',\n      FAILURE: 'failed',\n      SUCCESS: 'complete',\n      REMOVE: 'remove',\n      DONE: 'done'\n    },\n    MSG_ON: {\n      STARTED: 'The command is started',\n      PROMOTION: 'The command is promoted',\n      PROGRESS: 'The command is processing ...',\n      FAILURE: 'The command execution is failed',\n      SUCCESS: 'The command execution is completed',\n      REMOVE: 'The command is removed',\n      DONE: 'The command is done'\n    },\n    DETAILS: {\n      SCHEMA: {\n        \"type\": \"array\",\n        \"items\": {\n          \"oneOf\": [{\n            \"properties\": {\n              \"type\": {\n                \"type\": \"string\",\n                \"enum\": [\"json\"]\n              },\n              \"title\": {\n                \"type\": \"string\"\n              },\n              \"data\": {\n                \"type\": [\"boolean\", \"number\", \"string\", \"array\", \"object\"]\n              }\n            },\n            \"required\": [\"type\", \"data\"]\n          }, {\n            \"properties\": {\n              \"type\": {\n                \"type\": \"string\",\n                \"enum\": [\"record\", \"object\"]\n              },\n              \"title\": {\n                \"type\": \"string\"\n              },\n              \"label\": {\n                \"type\": \"object\"\n              },\n              \"data\": {\n                \"type\": \"object\"\n              }\n            },\n            \"required\": [\"type\", \"label\", \"data\"]\n          }, {\n            \"properties\": {\n              \"type\": {\n                \"type\": \"string\",\n                \"enum\": [\"table\", \"grid\"]\n              },\n              \"title\": {\n                \"type\": \"string\"\n              },\n              \"label\": {\n                \"type\": \"object\"\n              },\n              \"data\": {\n                \"type\": \"array\",\n                \"minItems\": 1,\n                \"items\": {\n                  \"type\": \"object\"\n                }\n              }\n            },\n            \"required\": [\"type\", \"label\", \"data\"]\n          }]\n        }\n      }\n    }\n  }\n};\n\nmodule.exports = constx;","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/utils/debug.js":"'use strict';\n\nvar debug = function(pkgName) {\n  var log = (process.env.DEBUG) ? require('debug')(pkgName) : function() {};\n  log.isEnabled = process.env.DEBUG;\n  return log;\n};\n\ndebug.isEnabled = process.env.DEBUG;\n\nmodule.exports = debug;","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/backbone/config-loader.js":"'use strict';\n\nvar PROFILE_VALUE = process.env.NODE_DEVEBOT_PROFILE;\nvar SANDBOX_VALUE = process.env.NODE_DEVEBOT_SANDBOX;\n\nvar lodash = require('lodash');\nvar util = require('util');\nvar path = require('path');\n\nvar chores = require('../utils/chores.js');\nvar constx = require('../utils/constx.js');\nvar loader = require('../utils/loader.js');\nvar debuglog = require('../utils/debug.js')('devebot:configLoader');\n\nvar configNames = ['general', 'profile', 'sandbox'];\n\nfunction init(appName, appRootDir, libRootDirs) {\n  var label = chores.stringLabelCase(appName);\n  debuglog.isEnabled && debuglog(' + Config of application (%s) is loaded in context: %s', appName, label);\n\n  var PROFILE_LABEL = util.format('NODE_%s_PROFILE', label);\n  PROFILE_VALUE = process.env[PROFILE_LABEL] || PROFILE_VALUE;\n  if (!process.env[PROFILE_LABEL]) {\n    debuglog.isEnabled && debuglog(' - %s not found. Use NODE_DEVEBOT_PROFILE instead', PROFILE_LABEL);\n  }\n\n  var SANDBOX_LABEL = util.format('NODE_%s_SANDBOX', label);\n  SANDBOX_VALUE = process.env[SANDBOX_LABEL] || SANDBOX_VALUE;\n  if (!process.env[SANDBOX_LABEL]) {\n    debuglog.isEnabled && debuglog(' - %s not found. Use NODE_DEVEBOT_SANDBOX instead', SANDBOX_LABEL);\n  }\n\n  debuglog.isEnabled && debuglog(\" - %s's value: %s\", PROFILE_LABEL, PROFILE_VALUE);\n  debuglog.isEnabled && debuglog(\" - %s's value: %s\", SANDBOX_LABEL, SANDBOX_VALUE);\n\n  var config = init.loadConfig(appRootDir, libRootDirs);\n  return config;\n}\n\ninit.loadConfig = function(appRootDir, libRootDirs) {\n  libRootDirs = libRootDirs || [];\n\n  var config = {};\n  var configDir = path.join(appRootDir, '/config');\n\n  var contextFiles = chores.filterFiles(configDir, '.*\\.js');\n  var contextArray = lodash.map(contextFiles, function(file) {\n    return file.replace('.js', '').split(/[_]/);\n  });\n\n  var includedNames = {};\n  configNames.forEach(function(configName) {\n    includedNames[configName] = [];\n  });\n\n  if (lodash.isString(PROFILE_VALUE) && PROFILE_VALUE.length > 0) {\n    includedNames['profile'].push(PROFILE_VALUE);\n  }\n\n  if (lodash.isString(SANDBOX_VALUE) && SANDBOX_VALUE.length > 0) {\n    includedNames['sandbox'] = SANDBOX_VALUE.split(',');\n  }\n\n  configNames.forEach(function(configName) {\n    config[configName] = {};\n\n    var defaultFile = path.join(configDir, configName + '.js');\n\n    if (debuglog.isEnabled) debuglog(' + load the default config: %s', defaultFile);\n    config[configName]['default'] = loader(defaultFile);\n\n    libRootDirs.forEach(function(libRootDir) {\n      defaultFile = path.join(libRootDir, '/config', configName + '.js');\n      config[configName]['default'] = lodash.defaultsDeep(config[configName]['default'], loader(defaultFile));\n    });\n\n    if (debuglog.isEnabled) debuglog(' + load the custom config of %s', configName);\n    config[configName]['context'] = {};\n\n    var contextNames = lodash.filter(contextArray, function(item) {\n      var found = (item.length == 2) && (item[0] == configName) && (item[1].length > 0);\n\n      if (constx.CONFIG.MUST_SPECIFY_IN_ENV || (includedNames[configName].length > 0)) {\n        found = found && (lodash.indexOf(includedNames[configName], item[1]) >= 0);\n      }\n\n      return found;\n    });\n\n    lodash.forEach(contextNames, function(contextItem) {\n      var contextFile = path.join(configDir, contextItem.join('_') + '.js');\n      if (debuglog.isEnabled) debuglog(' - load the environment config: %s', contextFile);\n      var contextCfg = lodash.defaultsDeep(loader(contextFile), config[configName]['default']);\n      if ((includedNames[configName].length > 0) || !(contextCfg.disabled)) {\n        var contextName = contextItem[1];\n        config[configName]['context'][contextName] = contextCfg;\n      }\n    });\n\n    if (configName == 'profile') {\n      var profileList = lodash.values(config[configName]['context']);\n      if (profileList.length > 0) {\n        config[configName]['context'] = profileList[0];\n      } else {\n        config[configName]['context'] = config[configName]['default'];\n      }\n    }\n\n    if (configName == 'sandbox') {\n      if (lodash.isEmpty(config[configName]['context'])) {\n        config[configName]['context']['default'] = config[configName]['default'];\n      }\n    }\n\n    debuglog.isEnabled && debuglog(' - environment config object: %s', util.inspect(config[configName], {depth: 2}));\n  });\n\n  return config;\n};\n\nmodule.exports = init;\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/utils/chores.js":"'use strict';\n\nvar lodash = require('lodash');\nvar fs = require('fs');\nvar path = require('path');\nvar util = require('util');\n\nvar constx = require('./constx.js');\nvar loader = require('./loader.js');\nvar debug = require('./debug.js');\nvar debuglog = debug('devebot:chores');\n\nvar chores = {};\n\nchores.pickProperty = function(propName, containers, propDefault) {\n  if (!lodash.isString(propName) || !lodash.isArray(containers)) return null;\n  for(var i=0; i<containers.length; i++) {\n    if (lodash.isObject(containers[i]) && containers[i][propName]) {\n      return containers[i][propName];\n    }\n  }\n  return propDefault;\n};\n\nchores.listFiles = function(dir, filenames) {\n  return chores.filterFiles(dir, filenames, '.*');\n};\n\nchores.filterFiles = function(dir, filter, filenames) {\n  filenames = filenames || [];\n  var regex = (filter) ? new RegExp(filter) : null;\n  var files;\n  try {\n    files = fs.readdirSync(dir);\n  } catch (err) {\n    files = [];\n  }\n  for (var i in files) {\n    if ((regex) ? regex.test(files[i]) : true) {\n      var name = dir + '/' + files[i];\n      if (fs.statSync(name).isFile()) {\n        filenames.push(files[i]);\n      }\n    }\n  }\n  return filenames;\n};\n\nchores.loadServiceByNames = function(serviceMap, serviceFolder, serviceNames) {\n  var self = this;\n  \n  if (debuglog.isEnabled) {\n    debuglog(' - load services by names: %s', JSON.stringify(serviceNames));\n  }\n  \n  serviceNames = (lodash.isArray(serviceNames)) ? serviceNames : [serviceNames];\n  \n  serviceNames.forEach(function(serviceName) {\n    var filepath = path.join(serviceFolder, serviceName + '.js');\n    var serviceConstructor = loader(filepath);\n    if (lodash.isFunction(serviceConstructor)) {\n      var serviceEntry = {};\n      var entryPath = serviceName.replace(/-([a-z])/g, function (m, w) {\n        return w.toUpperCase();\n      });\n      serviceEntry[entryPath] = serviceConstructor;\n      lodash.defaults(serviceMap, serviceEntry);\n    }\n  });\n};\n\nchores.stringKebabCase = function kebabCase(str) {\n  return (str || '').toLowerCase().replace(' ', '-');\n};\n\nchores.stringLabelCase = function labelCase(str) {\n  return (str || '').toUpperCase().replace('-', '_');\n};\n\nmodule.exports = chores;\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/utils/loader.js":"'use strict';\n\nvar debuglog = require('./debug.js')('devebot:loader');\n\nvar loader = function(name) {\n  try {\n    var modref = require(name);\n    debuglog.isEnabled && debuglog(' - file %s is loading ... ok', name);\n    return modref;\n  } catch(err) {\n    if (err.code === 'MODULE_NOT_FOUND') {\n      debuglog.isEnabled && debuglog(' - file %s is loading ... error. File not found', name);\n    } else {\n      debuglog.isEnabled && debuglog(' - file %s is loading ... error. Error: %s', name, JSON.stringify(err));\n    }\n    return {};\n  }\n};\n\nmodule.exports = loader;\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/server.js":"'use strict';\n\nvar lodash = require('lodash');\nvar http = require('http');\nvar https = require('https');\nvar fs = require('fs');\nvar WebSocketServer = require('ws').Server;\n\nvar Injektor = require('injektor');\n\nvar CommandController = require('./controllers/command-controller.js');\nvar CommandManager = require('./backbone/command-manager.js');\nvar SandboxManager = require('./backbone/sandbox-manager.js');\nvar SecurityManager = require('./backbone/security-manager.js');\nvar BridgeLoader = require('./backbone/bridge-loader.js');\nvar PluginLoader = require('./backbone/plugin-loader.js');\nvar LoggingFactory = require('./backbone/logging-factory.js');\n\nvar chores = require('./utils/chores.js');\n\nvar debuglog = require('./utils/debug.js')('devebot:server');\n\nfunction init(params) {\n  debuglog.isEnabled && debuglog(' + initialization start ...');\n\n  // init the default parameters\n  params = params || {};\n\n  // create injektor instance\n  var injektor = new Injektor();\n\n  injektor\n    .registerObject('appinfo', params['appinfo'])\n    .registerObject('bridgeRefs', params['bridgeRefs'])\n    .registerObject('pluginRefs', params['pluginRefs'])\n    .registerObject('sandboxList', params['sandbox']['context'])\n    .registerObject('profileConfig', params['profile']['context'])\n    .registerObject('generalConfig', params['general']['default'])\n    .defineService('commandController', CommandController)\n    .defineService('commandManager', CommandManager)\n    .defineService('sandboxManager', SandboxManager)\n    .defineService('securityManager', SecurityManager)\n    .defineService('bridgeLoader', BridgeLoader)\n    .defineService('pluginLoader', PluginLoader)\n    .defineService('loggingFactory', LoggingFactory);\n\n  // lookup service instances\n  var commandController = injektor.lookup('commandController');\n  var securityManager = injektor.lookup('securityManager');\n\n  // application root url\n  var appName = params.appName || 'devebot';\n  var appRootUrl = '/' + chores.stringKebabCase(appName);\n\n  // devebot configures\n  var devebotCfg = lodash.get(params, ['profile', 'context', 'devebot'], {});\n\n  var tunnelCfg = lodash.get(devebotCfg, ['tunnel'], {});\n  var sslEnabled = tunnelCfg.enabled && tunnelCfg.key_file && tunnelCfg.crt_file;\n\n  var processRequest = function(req, res) {\n    res.writeHead(200);\n    res.end(\"Devebot WebSockets!\\n\");\n  };\n\n  // creates a HttpServer instance\n  var server = sslEnabled ? https.createServer({\n    key: fs.readFileSync(tunnelCfg.key_file),\n    cert: fs.readFileSync(tunnelCfg.crt_file)\n  }, processRequest) : http.createServer(processRequest);\n\n  server.start = function() {\n    var serverHost = lodash.get(devebotCfg, ['host'], '0.0.0.0');\n    var serverPort = lodash.get(devebotCfg, ['port'], 17779);\n    var serverInstance = server.listen(serverPort, serverHost, function () {\n      var host = serverInstance.address().address;\n      var port = serverInstance.address().port;\n      console.log(appName + ' is listening at %s://%s:%s%s', sslEnabled?'wss':'ws', host, port, appRootUrl);\n      commandController.startDaemons();\n    });\n    return serverInstance;\n  };\n\n  var wss = new WebSocketServer({\n    server: server,\n    path: appRootUrl + '/execute',\n    verifyClient: function(info, callback) {\n      securityManager.authenticate(lodash.pick(info.req.headers, [\n        'x-token-jwt', 'x-token-key', 'x-token-secret'\n      ])).then(function(output) {\n        callback(output.result, output.code, output.name);\n      });\n    }\n  });\n\n  wss.on('connection', function connection(ws) {\n    ws.on('open', function handler() {\n      debuglog.isEnabled && debuglog(' - Websocket@server is opened');\n    });\n\n    ws.on('message', function incoming(data) {\n      debuglog.isEnabled && debuglog(' - Websocket@server is received a message data: <%s>', data);\n      commandController.executeCommand(data, ws);\n    });\n\n    ws.on('close', function handler(code, message) {\n      debuglog.isEnabled && debuglog(' - Websocket@server is closed, code: <%s>, message: <%s>', code, message);\n    });\n\n    ws.on('error', function handler(error) {\n      debuglog.isEnabled && debuglog(' - Websocket@server encounter an error: <%s>', error);\n    });\n  });\n\n  wss.on('error', function connection(error) {\n    debuglog.isEnabled && debuglog(' - Websocket@server has an error: <%s>', JSON.stringify(error));\n  });\n\n  debuglog.isEnabled && debuglog(' - initialization has finished');\n\n  return server;\n}\n\nmodule.exports = init;\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/controllers/command-controller.js":"'use strict';\n\nvar events = require('events');\nvar util = require('util');\n\nvar Promise = require('bluebird');\nvar lodash = require('lodash');\n\nvar Validator = require('jsonschema').Validator;\nvar validator = new Validator();\n\nvar chores = require('../utils/chores.js');\nvar constx = require('../utils/constx.js');\nvar debug = require('../utils/debug.js');\nvar debuglog = debug('devebot:commandController');\n\nvar Controller = function(params) {\n  debuglog.isEnabled && debuglog(' + constructor start ...');\n\n  var self = this;\n\n  var commandManager = params.commandManager;\n  var sandboxManager = params.sandboxManager;\n\n  self.startDaemons = function() {\n    sandboxManager.startTriggers();\n  };\n\n  self.stopDaemons = function() {\n    sandboxManager.stopTriggers();\n  };\n\n  self.executeCommand = function(command, socket) {\n    var listeners = { ws: socket };\n    var cmd = command || {};\n    if (lodash.isString(cmd)) {\n      cmd = JSON.parse(cmd);\n    }\n\n    if (cmd.command == 'definition') {\n      socket.send(JSON.stringify({\n        state: 'definition',\n        value: {\n          appinfo: params.appinfo,\n          commands: commandManager.getDefinitions()\n        }\n      }));\n      return;\n    }\n\n    var promixe = commandManager.execute(cmd, listeners);\n    return sendCommandOutput(socket, promixe, true);\n  };\n\n  var sendCommandOutput = function(socket, promise, finished) {\n    promise.then(function(value) {\n      socket.send(JSON.stringify({\n        state: constx.WEBSOCKET.STATE.SUCCESS,\n        message: constx.WEBSOCKET.MSG_ON.SUCCESS,\n        details: standardizeOutput(value, false)\n      }));\n    }, function(error) {\n      socket.send(JSON.stringify({\n        state: constx.WEBSOCKET.STATE.FAILURE,\n        message: constx.WEBSOCKET.MSG_ON.FAILURE,\n        details: standardizeOutput(error, true)\n      }));\n    }).finally(function() {\n      if (finished) {\n        socket.send(JSON.stringify({ state: constx.WEBSOCKET.STATE.DONE }));\n      }\n    });\n  };\n\n  var standardizeOutput = function(output, isError) {\n    var outputArray = lodash.isArray(output) ? output : [output];\n    outputArray = lodash.filter(outputArray, function(outputObject) {\n      return lodash.isObject(outputObject) && !lodash.isEmpty(outputObject);\n    });\n    var valresult = validator.validate(outputArray, constx.WEBSOCKET.DETAILS.SCHEMA);\n    if (valresult.errors.length > 0) {\n      outputArray = [{\n        type: 'json',\n        title: isError ? constx.WEBSOCKET.MSG_ON.FAILURE : constx.WEBSOCKET.MSG_ON.SUCCESS,\n        data: output\n      }];\n    }\n    return outputArray;\n  };\n\n  debuglog.isEnabled && debuglog(' - constructor has finished');\n};\n\nController.argumentSchema = {\n  \"id\": \"commandController\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"appinfo\": {\n      \"type\": \"object\"\n    },\n    \"loggingFactory\": {\n      \"type\": \"object\"\n    },\n    \"commandManager\": {\n      \"type\": \"object\"\n    },\n    \"sandboxManager\": {\n      \"type\": \"object\"\n    }\n  }\n};\n\nmodule.exports = Controller;\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/backbone/command-manager.js":"'use strict';\n\nvar events = require('events');\nvar util = require('util');\nvar lodash = require('lodash');\n\nvar Validator = require('jsonschema').Validator;\nvar validator = new Validator();\n\nvar chores = require('../utils/chores.js');\nvar constx = require('../utils/constx.js');\n\nvar debuglog = require('../utils/debug.js')('devebot:commandManager');\n\nvar Service = function(params) {\n  debuglog.isEnabled && debuglog(' + constructor start ...');\n\n  params = params || {};\n\n  var self = this;\n\n  self.logger = params.loggingFactory.getLogger();\n\n  var commandInstance = lodash.pick(params, [\n    'appinfo',\n    'loggingFactory',\n    'sandboxManager'\n  ]);\n\n  var commandMap = {};\n\n  self.getCommands = function() {\n    return (commandMap[constx.COMMAND.ROOT_KEY] || {});\n  };\n\n  self.getDefinitions = function() {\n    var commands = this.getCommands();\n    var defs = [];\n    lodash.forOwn(commands, function(value, key) {\n      defs.push(lodash.assign({name: key}, value.info));\n    });\n    return defs;\n  };\n\n  self.isAvailable = function(name) {\n    var commands = this.getCommands();\n    return (lodash.isObject(commands[name]));\n  };\n\n  self.execute = function(cmddef, commandContext) {\n    commandContext = commandContext || {};\n    self.logger.debug(' + Execute command: %s', JSON.stringify(cmddef));\n    var commands = this.getCommands();\n    var cmdobj = commands[cmddef.command];\n    if (!cmdobj) {\n      throw new Error('command_not_found');\n    }\n    return cmdobj.handler.call(commandInstance, cmddef.options, commandContext);\n  };\n\n  params.pluginLoader.loadCommands(commandMap, {});\n\n  debuglog.isEnabled && debuglog(' - validate commands:');\n  var result = {};\n  lodash.forOwn(self.getCommands(), function(command, name) {\n    var output = validate(command);\n    if (!output.valid) {\n      result[name] = output;\n    }\n  });\n  debuglog.isEnabled && debuglog(' . validation result: %s', JSON.stringify(result, null, 2));\n\n  debuglog.isEnabled && debuglog(' - constructor has finished');\n};\n\nService.argumentSchema = {\n  \"id\": \"commandManager\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"appinfo\": {\n      \"type\": \"object\"\n    },\n    \"pluginLoader\": {\n      \"type\": \"object\"\n    },\n    \"profileConfig\": {\n      \"type\": \"object\"\n    },\n    \"generalConfig\": {\n      \"type\": \"object\"\n    },\n    \"loggingFactory\": {\n      \"type\": \"object\"\n    },\n    \"sandboxManager\": {\n      \"type\": \"object\"\n    }\n  }\n};\n\nmodule.exports = Service;\n\nvar validate = function(target) {\n  target = target || {};\n  var results = [];\n\n  var targetProps = lodash.pick(target, lodash.keys(constx.COMMAND.SCHEMA.OBJECT.properties));\n  results.push(validator.validate(targetProps, constx.COMMAND.SCHEMA.OBJECT));\n\n  if (!lodash.isFunction(target.handler)) {\n    results.push({\n      valid: false,\n      errors: [{\n        message: 'handler has wrong type: ' + typeof(target.handler)\n      }]\n    });\n  }\n\n  return results.reduce(function(output, result) {\n    output.valid = output.valid && (result.valid != false);\n    output.errors = output.errors.concat(result.errors);\n    return output;\n  }, { valid: true, errors: [] });\n};\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/backbone/sandbox-manager.js":"'use strict';\n\nvar events = require('events');\nvar util = require('util');\nvar lodash = require('lodash');\n\nvar Injektor = require('injektor');\n\nvar RunhookManager = require('./runhook-manager.js');\n\nvar chores = require('../utils/chores.js');\nvar constx = require('../utils/constx.js');\nvar debug = require('../utils/debug.js');\nvar debuglog = debug('devebot:sandboxManager');\n\nvar defaultServiceNames = [\n  'jobqueue-factory', 'jobqueue-master', 'jobqueue-worker'\n];\n\nvar Service = function(params) {\n  debuglog.isEnabled && debuglog(' + constructor start ...');\n\n  params = params || {};\n\n  var self = this;\n\n  var managerMap = {};\n  var serviceMap = {};\n  var triggerMap = {};\n\n  chores.loadServiceByNames(managerMap, __dirname, defaultServiceNames);\n\n  params.pluginLoader.loadServices(serviceMap);\n  params.pluginLoader.loadTriggers(triggerMap);\n\n  var managerNames = lodash.keys(managerMap);\n  serviceMap = lodash.omit(serviceMap, managerNames);\n  triggerMap = lodash.omit(triggerMap, managerNames);\n\n  var injectedServices = [];\n  lodash.forOwn(serviceMap, function(serviceConstructor, serviceName) {\n    var serviceEntry = {};\n    serviceEntry[serviceName] = { \"type\": \"object\" };\n    lodash.assign(RunhookManager.argumentSchema.properties, serviceEntry);\n    injectedServices.push(serviceName);\n  });\n\n  var sandboxes = {};\n\n  var contexts = params['sandboxList'] || {};\n  lodash.forOwn(contexts, function(value, key) {\n    var sandbox = {};\n\n    debuglog.isEnabled && debuglog(' - load the context[%s] with configuration: %s', key, util.inspect(value));\n    debuglog.isEnabled && debuglog(' - create sandbox[%s].injektor object', key);\n\n    sandbox.injektor = new Injektor();\n    sandbox.injektor\n      .registerObject('sandboxName', key)\n      .registerObject('sandboxConfig', value)\n      .registerObject('generalConfig', params['generalConfig'])\n      .registerObject('profileConfig', params['profileConfig'])\n      .registerObject('pluginLoader', params['pluginLoader'])\n      .registerObject('loggingFactory', params['loggingFactory']);\n\n    lodash.forOwn(managerMap, function(managerConstructor, managerName) {\n      sandbox.injektor.defineService(managerName, managerConstructor);\n    });\n\n    lodash.forOwn(serviceMap, function(serviceConstructor, serviceName) {\n      sandbox.injektor.defineService(serviceName, serviceConstructor);\n    });\n\n    lodash.forOwn(triggerMap, function(triggerConstructor, triggerName) {\n      sandbox.injektor.defineService(triggerName, triggerConstructor);\n    });\n\n    var wrapperMap = params.bridgeLoader.loadWrappers({}, lodash.get(value, ['bridges'], {}));\n\n    lodash.forOwn(wrapperMap, function(wrapperConstructor, wrapperName) {\n      sandbox.injektor.defineService(wrapperName, wrapperConstructor);\n    });\n\n    var sandboxServices = [].concat(lodash.cloneDeep(injectedServices), lodash.keys(wrapperMap));\n    sandbox.injektor.registerObject('injectedServices', sandboxServices);\n\n    var sandboxRunhookManager = wrapRunhookManager(lodash.keys(wrapperMap));\n    sandbox.injektor.defineService('runhookManager', sandboxRunhookManager);\n\n    sandbox.injektor.registerObject('bridgeWrapperNames', lodash.keys(wrapperMap));\n    sandbox.injektor.registerObject('pluginServiceNames', lodash.keys(serviceMap));\n    sandbox.injektor.registerObject('pluginTriggerNames', lodash.keys(triggerMap));\n\n    sandboxes[key] = sandbox;\n  });\n\n  lodash.forOwn(sandboxes, function(sandboxInstance, sandboxName) {\n    lodash.forOwn(serviceMap, function(serviceConstructor, serviceName) {\n      sandboxes[sandboxName].injektor.lookup(serviceName);\n    });\n\n    lodash.forOwn(triggerMap, function(triggerConstructor, triggerName) {\n      sandboxes[sandboxName].injektor.lookup(triggerName);\n    });\n\n    sandboxes[sandboxName].injektor.lookup('runhookManager');\n  });\n\n  self.getSandboxNames = function() {\n    return lodash.keys(sandboxes);\n  };\n\n  self.isSandboxAvailable = function(sandboxName) {\n    return lodash.isObject(sandboxes[sandboxName]);\n  };\n\n  var sandboxPointer = lodash.keys(sandboxes)[0];\n\n  self.getSandboxPointer = function() {\n    return sandboxPointer;\n  };\n\n  self.setSandboxPointer = function(sandboxName) {\n    sandboxPointer = sandboxName;\n  };\n\n  self.getSandboxService = function(serviceName) {\n    return sandboxes[sandboxPointer].injektor.lookup(serviceName);\n  };\n\n  self.getBridgeWrapperNames = function() {\n    return sandboxes[sandboxPointer].injektor.lookup('bridgeWrapperNames');\n  };\n\n  self.getPluginServiceNames = function() {\n    return sandboxes[sandboxPointer].injektor.lookup('pluginServiceNames');\n  };\n\n  self.getPluginTriggerNames = function() {\n    return sandboxes[sandboxPointer].injektor.lookup('pluginTriggerNames');\n  };\n\n  self.startTriggers = function(sandboxNames, triggerNames) {\n    debuglog.isEnabled && debuglog(' - Start triggers: ');\n    self.eachTriggers(function(trigger) {\n      trigger.start();\n    }, sandboxNames, triggerNames);\n  };\n\n  self.stopTriggers = function(sandboxNames, triggerNames) {\n    debuglog.isEnabled && debuglog(' - Stop triggers: ');\n    self.eachTriggers(function(trigger) {\n      trigger.stop();\n    }, sandboxNames, triggerNames);\n  };\n\n  self.eachTriggers = function(iteratee, sandboxNames, triggerNames) {\n    if (!lodash.isFunction(iteratee)) return;\n\n    if (lodash.isString(sandboxNames)) sandboxNames = [sandboxNames];\n    if (sandboxNames && !lodash.isArray(sandboxNames)) return;\n    debuglog.isEnabled && debuglog(' - Loop sandboxes: %s', JSON.stringify(sandboxNames || 'all'));\n\n    if (lodash.isString(triggerNames)) triggerNames = [triggerNames];\n    if (triggerNames && !lodash.isArray(triggerNames)) return;\n    debuglog.isEnabled && debuglog(' - Loop triggers: %s', JSON.stringify(triggerNames || 'all'));\n\n    lodash.forOwn(sandboxes, function(sandboxInstance, sandboxName) {\n      if (!sandboxNames || sandboxNames.indexOf(sandboxName) >= 0) {\n        lodash.forOwn(triggerMap, function(triggerClass, triggerName) {\n          if (!triggerNames || triggerNames.indexOf(triggerName) >= 0) {\n            if (debuglog.isEnabled) debuglog(' - run sandbox[%s][%s]', sandboxName, triggerName);\n            iteratee(sandboxes[sandboxName].injektor.lookup(triggerName));\n          }\n        });\n      }\n    });\n  };\n\n  self.getServiceInfo = function() {\n    return {};\n  };\n\n  self.getServiceHelp = function() {\n    var blocks = [];\n\n    blocks.push({\n      type: 'record',\n      title: 'Sandbox overview',\n      label: {\n        sandbox_pointer: 'Current sanbox',\n        sandbox_names: 'List of sandboxes',\n        bridge_wrapper_names: 'Bridge wrappers',\n        plugin_service_names: 'Plugin services',\n        plugin_trigger_names: 'Plugin triggers'\n      },\n      data: {\n        sandbox_pointer: self.getSandboxPointer(),\n        sandbox_names: JSON.stringify(self.getSandboxNames(), null, 2),\n        bridge_wrapper_names: JSON.stringify(self.getBridgeWrapperNames(), null, 2),\n        plugin_service_names: JSON.stringify(self.getPluginServiceNames(), null, 2),\n        plugin_trigger_names: JSON.stringify(self.getPluginTriggerNames(), null, 2)\n      }\n    });\n\n    mergeSandboxServiceHelps.call(self, self.getBridgeWrapperNames(), blocks);\n    mergeSandboxServiceHelps.call(self, self.getPluginServiceNames(), blocks);\n    mergeSandboxServiceHelps.call(self, self.getPluginTriggerNames(), blocks);\n\n    return blocks;\n  };\n\n  debuglog.isEnabled && debuglog(' - constructor has finished');\n};\n\nService.argumentSchema = {\n  \"id\": \"sandboxManager\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"bridgeLoader\": {\n      \"type\": \"object\"\n    },\n    \"pluginLoader\": {\n      \"type\": \"object\"\n    },\n    \"sandboxList\": {\n      \"type\": \"object\"\n    },\n    \"profileConfig\": {\n      \"type\": \"object\"\n    },\n    \"generalConfig\": {\n      \"type\": \"object\"\n    },\n    \"loggingFactory\": {\n      \"type\": \"object\"\n    }\n  }\n};\n\nmodule.exports = Service;\n\nvar wrapRunhookManager = function(wrapperNames) {\n  function wrapperConstructor(params) {\n    RunhookManager.call(this, params);\n  }\n\n  wrapperConstructor.prototype = Object.create(RunhookManager.prototype);\n\n  wrapperConstructor.argumentSchema = lodash.cloneDeep(RunhookManager.argumentSchema);\n  lodash.forEach(wrapperNames, function(serviceName) {\n    var serviceEntry = {};\n    serviceEntry[serviceName] = { \"type\": \"object\" };\n    lodash.assign(wrapperConstructor.argumentSchema.properties, serviceEntry);\n  });\n\n  return wrapperConstructor;\n};\n\nvar mergeSandboxServiceHelps = function(serviceNames, blocks) {\n  debuglog.isEnabled && debuglog(' + retrieves and merges the list of serviceHelps');\n\n  var self = this;\n  serviceNames.forEach(function(serviceName) {\n    pickSandboxServiceHelp.call(self, serviceName, blocks);\n  });\n\n  debuglog.isEnabled && debuglog(' - merging serviceHelps has done!');\n};\n\nvar pickSandboxServiceHelp = function(serviceName, blocks) {\n  var self = this;\n  var serviceObject = self.getSandboxService(serviceName);\n  if (lodash.isObject(serviceObject) && lodash.isFunction(serviceObject.getServiceHelp)) {\n    var serviceHelp = serviceObject.getServiceHelp();\n    if (lodash.isObject(serviceHelp) && !lodash.isArray(serviceHelp)) {\n      serviceHelp = [serviceHelp];\n    }\n    if (lodash.isArray(serviceHelp)) {\n      lodash.forEach(serviceHelp, function(serviceInfo) {\n        if (lodash.isString(serviceInfo.title)) {\n          serviceInfo.title = serviceName + ' - ' + serviceInfo.title;\n        }\n        blocks.push(serviceInfo);\n      });\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/backbone/runhook-manager.js":"'use strict';\n\nvar events = require('events');\nvar util = require('util');\nvar path = require('path');\nvar Promise = require('bluebird');\nvar lodash = require('lodash');\n\nvar chores = require('../utils/chores.js');\nvar constx = require('../utils/constx.js');\nvar debuglog = require('../utils/debug.js')('devebot:runhookManager');\n\n/**\n * The constructor for RunhookManager class.\n *\n * @constructor\n * @param {Object} params - The parameters of the constructor.\n * @param {Object} params.runhook - The parameters that sent to Runhooks\n */\nvar Service = function(params) {\n  debuglog.isEnabled && debuglog(' + constructor start ...');\n\n  params = params || {};\n\n  var self = this;\n\n  self.logger = params.loggingFactory.getLogger();\n\n  self.runhookInstance = {\n    sandboxName: params.sandboxName,\n    sandboxConfig: params.sandboxConfig,\n    service: {\n      loggingFactory: params.loggingFactory\n    }\n  };\n\n  lodash.forEach(params.injectedServices, function(serviceName) {\n    self.runhookInstance.service[serviceName] = params[serviceName];\n  });\n\n  self.getSandboxName = function() {\n    return params.sandboxName;\n  };\n\n  debuglog.isEnabled && debuglog(' - create a runhook-manager instance in <%s>', self.getSandboxName());\n\n  var runhookRoot = {};\n\n  self.getRunhooks = function() {\n    return (runhookRoot[constx.RUNHOOK.ROOT_KEY] || {});\n  };\n\n  self.isContextPassedAtLoading = function() {\n    return lodash.get(params, ['generalConfig', constx.RUNHOOK.ROOT_KEY, 'context_passed_at_loading']) == true;\n  };\n\n  self.isRunhookPathAsc = function() {\n    return true;\n  };\n\n  params.pluginLoader.loadRunhooks(runhookRoot, self.isContextPassedAtLoading() ? self.runhookInstance : {});\n\n  debuglog.isEnabled && debuglog(' - constructor has finished');\n};\n\nService.argumentSchema = {\n  \"id\": \"runhookManager\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"injectedServices\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"pluginLoader\": {\n      \"type\": \"object\"\n    },\n    \"sandboxName\": {\n      \"type\": \"string\"\n    },\n    \"sandboxConfig\": {\n      \"type\": \"object\"\n    },\n    \"profileConfig\": {\n      \"type\": \"object\"\n    },\n    \"generalConfig\": {\n      \"type\": \"object\"\n    },\n    \"loggingFactory\": {\n      \"type\": \"object\"\n    }\n  }\n};\n\nService.prototype.getRunhookEntities = function(routine) {\n  var self = this;\n  var runhooks = self.getRunhooks();\n\n  var modelsByRoutine = [];\n  if (self.isRunhookPathAsc()) {\n    if (lodash.isObject(runhooks[routine])) {\n      modelsByRoutine = lodash.keys(runhooks[routine]);\n    }\n  } else {\n    var models = lodash.keys(runhooks) || [];\n    for(var i=0; i<models.length; i++) {\n      if (lodash.isObject(runhooks[models[i]]) &&\n          lodash.isObject(runhooks[models[i]][routine])) {\n        modelsByRoutine.push(models[i]);\n      }\n    }\n  }\n  return modelsByRoutine;\n};\n\nService.prototype.getRunhookOperations = function(routine, entity) {\n  var self = this;\n  var runhooks = self.getRunhooks();\n  if (self.isRunhookPathAsc()) {\n    if (lodash.isObject(runhooks[routine]) &&\n        lodash.isObject(runhooks[routine][entity])) {\n      return lodash.keys(runhooks[routine][entity]);\n    }\n  } else {\n    if (lodash.isObject(runhooks[entity]) &&\n        lodash.isObject(runhooks[entity][routine])) {\n      return lodash.keys(runhooks[entity][routine]);\n    }\n  }\n  return [];\n};\n\nService.prototype.isRunhookAvailable = function(routine, entity, operation) {\n  var self = this;\n  var runhooks = self.getRunhooks();\n  if (self.isRunhookPathAsc()) {\n    return (lodash.isObject(runhooks[routine]) &&\n        lodash.isObject(runhooks[routine][entity]) &&\n        lodash.isFunction(runhooks[routine][entity][operation]));\n  } else {\n    return (lodash.isObject(runhooks[entity]) &&\n        lodash.isObject(runhooks[entity][routine]) &&\n        lodash.isFunction(runhooks[entity][routine][operation]));\n  }\n};\n\nService.prototype.callRunhook = function(routine, entity, operation, document) {\n  var self = this;\n  var runhooks = self.getRunhooks();\n  self.logger.debug('<%s> * callRunhook(\"%s\", \"%s\", \"%s\")', self.getSandboxName(), routine, entity, operation);\n  if (self.isRunhookAvailable(routine, entity, operation)) {\n    var runhookOp = self.isRunhookPathAsc() ? runhooks[routine][entity][operation] : runhooks[entity][routine][operation];\n    return Promise.resolve(self.isContextPassedAtLoading() ? runhookOp(document) : runhookOp.call(self.runhookInstance, document));\n  } else {\n    return Promise.reject({ name: 'runhook_is_not_available', routine: routine, entity: entity, operation: operation});\n  }\n};\n\nService.prototype.getServiceInfo = function() {\n  return {};\n};\n\nService.prototype.getServiceHelp = function() {\n  return [];\n};\n\nmodule.exports = Service;\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/backbone/security-manager.js":"'use strict';\n\nvar events = require('events');\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\nvar Promise = require('bluebird');\nvar lodash = require('lodash');\n\nvar chores = require('../utils/chores.js');\nvar constx = require('../utils/constx.js');\nvar debuglog = require('../utils/debug.js')('devebot:securityManager');\n\nvar Service = function(params) {\n  debuglog.isEnabled && debuglog(' + constructor start ...');\n\n  var self = this;\n  params = params || {};\n\n  var authenCfg = lodash.get(params, ['profileConfig', 'devebot', 'authen'], {});\n\n  self.authenticate = function(tokens) {\n    var output = Promise.resolve({ result: true });\n\n    debuglog.isEnabled && debuglog(' - authenticate(%s): %s', JSON.stringify(tokens),\n        authenCfg.disabled ? 'skipped':'processing');\n\n    if (authenCfg.disabled) return output;\n\n    return loadTokenStore(authenCfg.tokenStoreFile).then(function(store) {\n      var storeTokens = store.tokens || [];\n      for(var i=0; i<storeTokens.length; i++) {\n        var storeToken = storeTokens[i];\n        if (storeToken.key && storeToken.key == tokens['x-token-key'] &&\n            storeToken.secret == tokens['x-token-secret']) {\n          return output;\n        }\n      }\n\n      return Promise.resolve({ result: false, code: 401, name: 'Token Not Found'});\n    });\n  };\n\n  var loadTokenStore = function(storefile) {\n    var readFile = Promise.promisify(fs.readFile);\n    return readFile(storefile, 'utf8').then(function(text) {\n      var data = JSON.parse(text);\n      if (lodash.isEmpty(data.tokens) || !lodash.isArray(data.tokens)) {\n        debuglog.isEnabled && debuglog(' - invalid tokenStore (%s), \"tokens\" must be an array', storefile);\n        return {};\n      }\n      debuglog(' - tokenStore (%s) has %s items', storefile, data.tokens.length);\n      return data;\n    }).catch(function(err) {\n      debuglog.isEnabled && debuglog(' - tokenStore loading has failed. Error: %s', JSON.stringify(err));\n      return {};\n    });\n  };\n\n  debuglog.isEnabled && debuglog(' - constructor has finished');\n};\n\nService.argumentSchema = {\n  \"id\": \"securityManager\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"profileConfig\": {\n      \"type\": \"object\"\n    },\n    \"generalConfig\": {\n      \"type\": \"object\"\n    },\n    \"loggingFactory\": {\n      \"type\": \"object\"\n    }\n  }\n};\n\nmodule.exports = Service;\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/backbone/bridge-loader.js":"'use strict';\n\nvar events = require('events');\nvar util = require('util');\nvar lodash = require('lodash');\n\nvar loader = require('../utils/loader.js');\nvar debug = require('../utils/debug.js');\nvar debuglog = debug('devebot:bridgeLoader');\n\nfunction BridgeLoader(params) {\n  debuglog.isEnabled && debuglog(' + constructor start ...');\n  BridgeLoader.super_.apply(this);\n\n  params = params || {};\n\n  debuglog.isEnabled && debuglog(' + bridgeLoader start with bridgeRefs: %s', JSON.stringify(params.bridgeRefs));\n\n  this.loadWrappers = function(wrapperMap, wrapperOptions) {\n    wrapperMap = wrapperMap || {};\n    lodash.defaultsDeep(wrapperMap, buildBridgeWrappers(params.bridgeRefs, wrapperOptions));\n    return wrapperMap;\n  };\n\n  debuglog.isEnabled && debuglog(' - constructor has finished');\n}\n\nBridgeLoader.argumentSchema = {\n  \"id\": \"bridgeLoader\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"bridgeRefs\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"path\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n};\n\nutil.inherits(BridgeLoader, events.EventEmitter);\n\nmodule.exports = BridgeLoader;\n\nvar bridgeNamePattern = /^devebot-co-([a-z][a-z0-9\\-]*)$/g;\n\nvar loadBridgeContructor = function(bridgeRef) {\n  bridgeRef = bridgeRef || {};\n\n  var bridgeName = bridgeRef.name;\n  var bridgePath = bridgeRef.path;\n\n  debuglog.isEnabled && debuglog(' - bridge constructor (%s) loading is started', bridgeName);\n\n  var result = {};\n\n  if (!bridgeName.match(bridgeNamePattern)) {\n    debuglog.isEnabled && debuglog(' - bridge with name \"%s\" is invalid', bridgeName);\n    return result;\n  }\n\n  var bridgeCode = bridgeName.replace(bridgeNamePattern, '\\$1')\n    .replace(/-([a-z])/g, function (m, w) { return w.toUpperCase(); })\n    .replace(/-([0-9])/g, function (m, w) { return '_' + w; });\n\n  var bridgeConstructor = loader(bridgePath);\n\n  if (!lodash.isFunction(bridgeConstructor)) {\n    debuglog.isEnabled && debuglog(' - bridge \"%s\" is not a constructor');\n    return result;\n  }\n\n  result[bridgeCode] = bridgeConstructor;\n\n  debuglog.isEnabled && debuglog(' - bridge constructor (%s) loading has done.', bridgeName);\n\n  return result;\n};\n\nvar loadBridgeConstructors = function(bridgeRefs) {\n  bridgeRefs = lodash.isArray(bridgeRefs) ? bridgeRefs : [];\n\n  bridgeRefs = lodash.filter(bridgeRefs, function(bridgeRef) {\n    return lodash.isString(bridgeRef.name) && lodash.isString(bridgeRef.path);\n  });\n\n  debuglog.isEnabled && debuglog(' - load a list of bridgeConstructors: %s', JSON.stringify(bridgeRefs));\n\n  var bridgeConstructors = {};\n  bridgeRefs.forEach(function(bridgeRef) {\n    lodash.assign(bridgeConstructors, loadBridgeContructor(bridgeRef));\n  });\n\n  debuglog.isEnabled && debuglog(' - bridge constructors have been loaded: %s', JSON.stringify(lodash.keys(bridgeConstructors)));\n\n  return bridgeConstructors;\n};\n\nvar buildBridgeWrapper = function(bridgeCode, bridgeConstructor, wrapperName, optType) {\n  var result = {};\n\n  if (!lodash.isString(bridgeCode)) {\n    debuglog.isEnabled && debuglog(' - bridgeCode is invalid');\n    return result;\n  }\n\n  if (!lodash.isFunction(bridgeConstructor)) {\n    debuglog.isEnabled && debuglog(' - bridgeConstructor is invalid');\n    return result;\n  }\n\n  wrapperName = wrapperName || bridgeCode + 'Wrapper';\n\n  debuglog.isEnabled && debuglog(' - build bridge wrapper (%s) is started', wrapperName);\n\n  var configPath;\n  switch(optType) {\n    case 0:\n      configPath = ['sandboxConfig', 'bridges', wrapperName, bridgeCode];\n      break;\n    case 1:\n      configPath = ['sandboxConfig', 'bridges', bridgeCode, wrapperName];\n      break;\n    default:\n      configPath = ['sandboxConfig', 'bridges', bridgeCode];\n  }\n\n  function wrapperConstructor(params) {\n    params = params || {};\n\n    var self = this;\n\n    self.logger = params.loggingFactory.getLogger();\n\n    self.getSandboxName = function() {\n      return params.sandboxName;\n    };\n\n    bridgeConstructor.call(self, lodash.assign({\n      tracking_code: params.sandboxName\n    }, lodash.get(params, configPath, {})));\n  }\n\n  wrapperConstructor.prototype = Object.create(bridgeConstructor.prototype);\n\n  wrapperConstructor.argumentSchema = {\n    \"id\": wrapperName,\n    \"type\": \"object\",\n    \"properties\": {\n      \"sandboxName\": {\n        \"type\": \"string\"\n      },\n      \"sandboxConfig\": {\n        \"type\": \"object\"\n      },\n      \"loggingFactory\": {\n        \"type\": \"object\"\n      }\n    }\n  };\n\n  result[wrapperName] = wrapperConstructor;\n\n  debuglog.isEnabled && debuglog(' - build bridge wrapper (%s) has done.', wrapperName);\n\n  return result;\n};\n\nvar buildBridgeWrappers = function(bridgeRefs, wrapperOptions, optType) {\n  optType = (lodash.isNumber(optType)) ? optType : 0;\n\n  debuglog.isEnabled && debuglog(' - bridgeWrappers will be built: %s', JSON.stringify(bridgeRefs));\n\n  var bridgeConstructors = loadBridgeConstructors(bridgeRefs);\n\n  var bridgeWrappers = {};\n  switch(optType) {\n    case 0:\n      lodash.forOwn(wrapperOptions, function(wrapperConfig, wrapperName) {\n        var bridgeCode = lodash.findKey(wrapperConfig, function(o, k) {\n          return lodash.isObject(o) && bridgeConstructors[k];\n        });\n        if (bridgeCode) {\n          lodash.assign(bridgeWrappers, buildBridgeWrapper(bridgeCode,\n              bridgeConstructors[bridgeCode], wrapperName, optType));\n        }\n      });\n      break;\n    case 1:\n      lodash.forOwn(wrapperOptions, function(wrapperMap, bridgeCode) {\n        lodash.forOwn(wrapperMap, function(wrapperConfig, wrapperName) {\n          lodash.assign(bridgeWrappers, buildBridgeWrapper(bridgeCode,\n              bridgeConstructors[bridgeCode], wrapperName, optType));\n        });\n      });\n      break;\n    default:\n      lodash.forOwn(wrapperOptions, function(bridgeConfig, bridgeCode) {\n        lodash.assign(bridgeWrappers, buildBridgeWrapper(bridgeCode,\n            bridgeConstructors[bridgeCode], bridgeCode + 'Wrapper', optType));\n      });\n  }\n\n  debuglog.isEnabled && debuglog(' - bridgeWrappers have been built: %s', JSON.stringify(lodash.keys(bridgeWrappers)));\n\n  return bridgeWrappers;\n};\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/backbone/plugin-loader.js":"'use strict';\n\nvar events = require('events');\nvar util = require('util');\nvar path = require('path');\nvar lodash = require('lodash');\n\nvar chores = require('../utils/chores.js');\nvar constx = require('../utils/constx.js');\nvar loader = require('../utils/loader.js');\nvar debug = require('../utils/debug.js');\nvar debuglog = debug('devebot:pluginLoader');\n\nfunction PluginLoader(params) {\n  debuglog.isEnabled && debuglog(' + constructor start ...');\n\n  params = params || {};\n\n  var pluginRootDirs = lodash.map(params.pluginRefs, function(pluginRef) {\n    return path.dirname(pluginRef.path);\n  });\n\n  debuglog.isEnabled && debuglog(' - pluginLoader start with pluginRootDirs: %s', JSON.stringify(pluginRootDirs, null, 2));\n\n  this.loadCommands = function(commandMap, commandContext) {\n    return loadAllScripts(commandMap, 'COMMAND', pluginRootDirs, commandContext);\n  };\n\n  this.loadRunhooks = function(runhookMap, runhookContext) {\n    return loadAllScripts(runhookMap, 'RUNHOOK', pluginRootDirs, runhookContext);\n  };\n\n  this.loadServices = function(serviceMap) {\n    return loadAllGadgets(serviceMap, 'SERVICE', pluginRootDirs);\n  };\n\n  this.loadTriggers = function(triggerMap) {\n    return loadAllGadgets(triggerMap, 'TRIGGER', pluginRootDirs);\n  };\n\n  debuglog.isEnabled && debuglog(' - constructor has finished');\n}\n\nPluginLoader.argumentSchema = {\n  \"id\": \"pluginLoader\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"pluginRefs\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"path\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n};\n\nvar loadAllScripts = function(scriptMap, scriptType, scriptRootDirs, scriptContext) {\n  var self = this;\n  scriptMap = scriptMap || {};\n\n  if (['COMMAND', 'RUNHOOK'].indexOf(scriptType) < 0) return scriptMap;\n\n  var scriptSubDir = constx[scriptType].SCRIPT_DIR;\n\n  scriptRootDirs.forEach(function(scriptRootDir) {\n    loadScriptEntries.call(self, scriptMap, scriptRootDir + scriptSubDir, scriptType, scriptContext);\n  });\n\n  return scriptMap;\n};\n\nvar loadScriptEntries = function(scriptMap, scriptFolder, scriptType, scriptContext) {\n  var self = this;\n\n  debuglog.isEnabled && debuglog(' - load %ss from folder: %s', constx[scriptType].ROOT_KEY, scriptFolder);\n\n  var scriptFiles = chores.filterFiles(scriptFolder, constx[scriptType].ROOT_KEY);\n  scriptFiles.forEach(function(scriptFile) {\n    loadScriptEntry.call(self, scriptMap, scriptFolder, scriptFile, scriptContext);\n  });\n};\n\nvar loadScriptEntry = function(scriptMap, scriptFolder, scriptFile, scriptContext) {\n  var filepath = path.join(scriptFolder, scriptFile);\n  var scriptInit = loader(filepath);\n  if (lodash.isFunction(scriptInit)) {\n    var target = scriptInit(scriptContext);\n    var entryPath = scriptFile.replace('.js', '').toLowerCase().split('_').reverse();\n    entryPath.unshift(target);\n    var entry = lodash.reduce(entryPath, function(result, item) {\n      var nestEntry = {};\n      nestEntry[item] = result;\n      return nestEntry;\n    });\n    lodash.defaultsDeep(scriptMap, entry);\n    debuglog.isEnabled && debuglog(' - script file %s is ok', filepath);\n  } else {\n    debuglog.isEnabled && debuglog(' - script file %s doesnot contain a function.', filepath);\n  }\n};\n\nvar loadAllGadgets = function(gadgetMap, gadgetType, pluginRootDirs) {\n  var self = this;\n  gadgetMap = gadgetMap || {};\n\n  if (['SERVICE', 'TRIGGER'].indexOf(gadgetType) < 0) return gadgetMap;\n\n  var gadgetSubDir = constx[gadgetType].SCRIPT_DIR;\n\n  pluginRootDirs.forEach(function(pluginRootDir) {\n    loadGadgetEntries.call(self, gadgetMap, gadgetType, pluginRootDir + gadgetSubDir);\n  });\n\n  return gadgetMap;\n};\n\nvar loadGadgetEntries = function(gadgetMap, gadgetType, gadgetFolder) {\n  var self = this;\n\n  debuglog.isEnabled && debuglog(' - load %ss from folder: %s', constx[gadgetType].ROOT_KEY, gadgetFolder);\n\n  var gadgetFiles = chores.filterFiles(gadgetFolder, '.*\\.js');\n  gadgetFiles.forEach(function(gadgetFile) {\n    loadGadgetEntry.call(self, gadgetMap, gadgetFolder, gadgetFile);\n  });\n};\n\nvar loadGadgetEntry = function(gadgetMap, gadgetFolder, gadgetFile) {\n  var filepath = path.join(gadgetFolder, gadgetFile);\n  var gadgetConstructor = loader(filepath);\n  if (lodash.isFunction(gadgetConstructor)) {\n    var gadgetName = gadgetFile.replace('.js', '').replace(/-([a-z])/g, function (m, w) {\n      return w.toUpperCase();\n    });\n    lodash.defaults(gadgetMap, buildGadgetWrapper(gadgetConstructor, gadgetName));\n  }\n};\n\nvar buildGadgetWrapper = function(gadgetConstructor, wrapperName) {\n  var result = {};\n\n  if (!lodash.isFunction(gadgetConstructor)) {\n    debuglog.isEnabled && debuglog(' - gadgetConstructor is invalid');\n    return result;\n  }\n\n  function wrapperConstructor(params) {\n    params = params || {};\n    //params.sandboxConfig = lodash.get(params, ['sandboxConfig', 'plugins', wrapperName], {});\n    gadgetConstructor.call(this, params);\n  }\n\n  wrapperConstructor.prototype = Object.create(gadgetConstructor.prototype);\n\n  wrapperConstructor.argumentSchema = gadgetConstructor.argumentSchema;\n\n  result[wrapperName] = wrapperConstructor;\n\n  debuglog.isEnabled && debuglog(' - build gadget wrapper (%s) has done.', wrapperName);\n\n  return result;\n};\n\nmodule.exports = PluginLoader;\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/backbone/logging-factory.js":"'use strict';\n\nvar lodash = require('lodash');\nvar Logdapter = require('logdapter');\n\nvar Service = function(params) {\n  params = params || {};\n  var logdapter = new Logdapter(transformConfig(params.profileConfig));\n\n  lodash.assign(this, lodash.mapValues(lodash.pick(logdapter, [\n    'getLogger', 'getServiceInfo', 'getServiceHelp'\n  ]), function(item) {\n    return item.bind(logdapter);\n  }));\n};\n\nvar transformConfig = function(profileConfig) {\n  profileConfig = profileConfig || {};\n  \n  var loggerConfig = profileConfig.logger;\n  if (!lodash.isObject(loggerConfig)) return profileConfig;\n  \n  var transportDefs = loggerConfig.transports;\n  if (!lodash.isObject(transportDefs)) return profileConfig;\n  \n  var transports = [];\n  lodash.forOwn(transportDefs, function(transportDef, key) {\n    if (lodash.isObject(transportDef)) {\n      if (!transportDef.type) {\n        transportDef.type = key;\n      }\n      transports.push(transportDef);\n    }\n  });\n  profileConfig.logger.transports = transports;\n\n  return profileConfig;\n};\n\nService.argumentSchema = {\n  \"id\": \"loggingFactory\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"profileConfig\": {\n      \"type\": \"object\"\n    }\n  }\n};\n\nService.defaultLogger = Logdapter.defaultLogger;\n\nService.prototype.defaultLogger = Service.defaultLogger;\n\nmodule.exports = Service;\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/config/general.js":"module.exports = {};\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/config/profile.js":"module.exports = {\n  devebot: {\n    host: '0.0.0.0',\n    port: '17779',\n    authen: {\n      disabled: false,\n      tokenStoreFile: __dirname + '/../data/tokenstore.json')\n    },\n    tunnel: {\n      enabled: false,\n      key_file: __dirname + '/../data/ssl/example.key'),\n      crt_file: __dirname + '/../data/ssl/example.crt')\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/config/sandbox.js":"module.exports = {\n  devebot: {\n    jobqueue: {\n      enabled: false,\n      default: 'redis',\n      engines: [\n        {\n          name: 'redis',\n          config: {\n            host: '127.0.0.1',\n            port: 6379,\n            name: 'devebotjq'\n          }\n        }\n      ]\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/backbone/jobqueue-factory.js":"'use strict';\n\nvar events = require('events');\nvar util = require('util');\n\nvar Jobdapter = require('jobdapter');\nvar lodash = require('lodash');\n\nvar debug = require('../utils/debug.js');\nvar debuglog = debug('devebot:jobqueueFactory');\n\nvar Service = function(params) {\n  debuglog.isEnabled && debuglog(' + constructor start ...');\n  params = params || {};\n\n  var self = this;\n\n  self.getSandboxName = function() {\n    return params.sandboxName;\n  };\n\n  var jobQueueOfRoutine = lodash.get(params, 'generalConfig.jobqueue.mappings', {});\n\n  self.getJobQueueMappings = function() {\n    return jobQueueOfRoutine;\n  };\n\n  self.getJobQueueOfRoutine = function(routine) {\n    var event = (jobQueueOfRoutine[routine] ? jobQueueOfRoutine[routine] : 'jobqueue-global');\n    return event + '-' + self.getSandboxName();\n  };\n\n  var engine_hash = {};\n  var engine_name = lodash.get(params, ['sandboxConfig', 'devebot', 'jobqueue', 'default'], 'redis');\n  var engine_list = lodash.get(params, ['sandboxConfig', 'devebot', 'jobqueue', 'engines'], []);\n  lodash.forEach(engine_list, function(engine_item) {\n    engine_hash[engine_item.name] = engine_item.config;\n  });\n\n  debuglog.isEnabled && debuglog(' - Jobqueue engines: %s', JSON.stringify(engine_hash));\n\n  var redis_conf = engine_hash[engine_name] || { host: '127.0.0.1', port: 6379, name: 'devebotjq' };\n\n  debuglog.isEnabled && debuglog(' - jobqueue in <%s> with redis config: %s', self.getSandboxName(), util.inspect(redis_conf));\n\n  var jobdapter = new Jobdapter({ redis: redis_conf });\n\n  lodash.assign(this, lodash.mapValues(lodash.pick(jobdapter, [\n    'getJobQueue', 'getServiceInfo', 'getServiceHelp'\n  ]), function(item) {\n    return item.bind(jobdapter);\n  }));\n\n  debuglog.isEnabled && debuglog(' - constructor has finished');\n};\n\nService.argumentSchema = {\n  \"id\": \"jobqueueFactory\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"sandboxName\": {\n      \"type\": \"string\"\n    },\n    \"sandboxConfig\": {\n      \"type\": \"object\"\n    },\n    \"profileConfig\": {\n      \"type\": \"object\"\n    },\n    \"generalConfig\": {\n      \"type\": \"object\"\n    }\n  }\n};\n\nmodule.exports = Service;\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/backbone/jobqueue-master.js":"'use strict';\n\nvar events = require('events');\nvar util = require('util');\n\nvar Promise = require('bluebird');\n\nvar constx = require('../utils/constx.js');\nvar debug = require('../utils/debug.js');\n\nvar debuglog = debug('devebot:jobqueueMaster');\n\nvar Service = function(params) {\n  debuglog.isEnabled && debuglog(' + constructor start ...');\n\n  params = params || {};\n\n  var self = this;\n\n  self.getSandboxName = function() {\n    return params.sandboxName;\n  };\n\n  self.logger = params.loggingFactory.getLogger();\n\n  debuglog.isEnabled && debuglog(' - create a jobqueueMaster instance in sandbox <%s>', self.getSandboxName());\n\n  self.enqueueJob = function(routine, entity, operation, document, inspectors) {\n    var promisee = function(done) {\n      inspectors = inspectors || {};\n      var opTimestamp = Date.now();\n\n      var jobQueueName = params.jobqueueFactory.getJobQueueOfRoutine(routine);\n      var job = params.jobqueueFactory.getJobQueue().create(jobQueueName, {\n        routine: routine,\n        entity: entity,\n        operation: operation,\n        optimestamp: opTimestamp,\n        document: document\n      });\n\n      job.on('enqueue', function(queueName) {\n        self.logger.trace(constx.JOB.MSG_ON_EVENT['enqueue'],\n            self.getSandboxName(), routine, operation, opTimestamp, entity);\n        self.logger.debug(constx.JOB.MSG_ON_EVENT['enqueue_debug'],\n            self.getSandboxName(), routine, operation, opTimestamp, entity, JSON.stringify(document), JSON.stringify(arguments));\n        if (inspectors.ws) {\n          inspectors.ws.send(JSON.stringify({\n            state: constx.WEBSOCKET.STATE.STARTED,\n            message: constx.WEBSOCKET.MSG_ON.STARTED\n          }));\n        }\n      }).on('promotion', function(unknown) {\n        self.logger.trace(constx.JOB.MSG_ON_EVENT['promotion'],\n            self.getSandboxName(), routine, operation, opTimestamp, entity);\n        self.logger.debug(constx.JOB.MSG_ON_EVENT['promotion_debug'],\n            self.getSandboxName(), routine, operation, opTimestamp, entity, JSON.stringify(document), JSON.stringify(arguments));\n        if (inspectors.ws) {\n          inspectors.ws.send(JSON.stringify({\n            state: constx.WEBSOCKET.STATE.PROMOTION,\n            message: constx.WEBSOCKET.MSG_ON.PROMOTION\n          }));\n        }\n      }).on('progress', function(progress, data) {\n        self.logger.debug(constx.JOB.MSG_ON_EVENT['progress'],\n            self.getSandboxName(), routine, operation, opTimestamp, entity, JSON.stringify(document), progress, JSON.stringify(data));\n        if (inspectors.ws) {\n          inspectors.ws.send(JSON.stringify({\n            state: constx.WEBSOCKET.STATE.PROGRESS,\n            message: constx.WEBSOCKET.MSG_ON.PROGRESS,\n            progress: progress,\n            data: data\n          }));\n        }\n      }).on('failed attempt', function(errorMessage, doneAttempts) {\n        self.logger.error(constx.JOB.MSG_ON_EVENT['failed'],\n            self.getSandboxName(), routine, operation, opTimestamp, entity, JSON.stringify(document), JSON.stringify(errorMessage));\n        if (inspectors.ws && inspectors.notifyFailure) {\n          inspectors.ws.send(JSON.stringify({\n            state: constx.WEBSOCKET.STATE.FAILURE,\n            message: constx.WEBSOCKET.MSG_ON.FAILURE,\n            error: errorMessage\n          }));\n        }\n      }).on('failed', function(errorMessage) {\n        self.logger.error(constx.JOB.MSG_ON_EVENT['failed'],\n            self.getSandboxName(), routine, operation, opTimestamp, entity, JSON.stringify(document), JSON.stringify(errorMessage));\n        if (inspectors.ws && inspectors.notifyFailure) {\n          inspectors.ws.send(JSON.stringify({\n            state: constx.WEBSOCKET.STATE.FAILURE,\n            message: constx.WEBSOCKET.MSG_ON.FAILURE,\n            error: errorMessage\n          }));\n        }\n        done(errorMessage, null);\n      }).on('complete', function(result) {\n        self.logger.trace(constx.JOB.MSG_ON_EVENT['complete'],\n            self.getSandboxName(), routine, operation, opTimestamp, entity);\n        self.logger.debug(constx.JOB.MSG_ON_EVENT['complete_debug'],\n            self.getSandboxName(), routine, operation, opTimestamp, entity, JSON.stringify(document), JSON.stringify(result));\n        if (inspectors.ws && inspectors.notifySuccess) {\n          inspectors.ws.send(JSON.stringify({\n            state: constx.WEBSOCKET.STATE.SUCCESS,\n            message: constx.WEBSOCKET.MSG_ON.SUCCESS,\n            result: result\n          }));\n        }\n        done(null, result);\n      }).on('remove', function(unknown) {\n        self.logger.trace(constx.JOB.MSG_ON_EVENT['remove'],\n            self.getSandboxName(), routine, operation, opTimestamp, entity);\n        self.logger.debug(constx.JOB.MSG_ON_EVENT['remove_debug'],\n            self.getSandboxName(), routine, operation, opTimestamp, entity, JSON.stringify(document), JSON.stringify(arguments));\n        if (inspectors.ws) {\n          inspectors.ws.send(JSON.stringify({\n            state: constx.WEBSOCKET.STATE.REMOVE,\n            message: constx.WEBSOCKET.MSG_ON.REMOVE\n          }));\n        }\n      });\n\n      job.removeOnComplete(true).save();\n    };\n    return Promise.promisify(promisee)();\n  };\n\n  self.getRunhookEntities = function(routine) {\n    return params.runhookManager.getRunhookEntities(routine);\n  };\n\n  self.getRunhookOperations = function(routine, entity) {\n    return params.runhookManager.getRunhookOperations(routine, entity);\n  };\n\n  debuglog.isEnabled && debuglog(' - jobqueueMaster instance in sandbox <%s> has been created', self.getSandboxName());\n\n  debuglog.isEnabled && debuglog(' - constructor has finished');\n};\n\nService.argumentSchema = {\n  \"id\": \"jobqueueMaster\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"sandboxName\": {\n      \"type\": \"string\"\n    },\n    \"loggingFactory\": {\n      \"type\": \"object\"\n    },\n    \"jobqueueFactory\": {\n      \"type\": \"object\"\n    },\n    \"runhookManager\": {\n      \"type\": \"object\"\n    }\n  }\n};\n\nmodule.exports = Service;\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/backbone/jobqueue-worker.js":"'use strict';\n\nvar events = require('events');\nvar util = require('util');\nvar lodash = require('lodash');\n\nvar constx = require('../utils/constx.js');\nvar debug = require('../utils/debug.js');\n\nvar debuglog = debug('devebot:jobqueueWorker');\n\nvar Service = function(params) {\n  debuglog.isEnabled && debuglog(' + constructor start ...');\n\n  params = params || {};\n\n  var self = this;\n\n  self.getSandboxName = function() {\n    return params.sandboxName;\n  };\n\n  self.logger = params.loggingFactory.getLogger();\n\n  var runhookManager = params.runhookManager;\n\n  self.getRunhookManager = function() {\n    return runhookManager;\n  };\n\n  var jobQueue = params.jobqueueFactory.getJobQueue();\n\n  var jobQueueProcess = function (job, done) {\n    var routine = job.data.routine;\n    var entity = job.data.entity;\n    var operation = job.data.operation;\n    var opTimestamp = job.data.optimestamp;\n    var doc = job.data.document;\n\n    if (runhookManager.isRunhookAvailable(routine, entity, operation)) {\n      self.logger.trace(constx.RUNHOOK.MSG.BEGIN, self.getSandboxName(), routine, operation, opTimestamp, entity);\n      self.logger.debug(constx.RUNHOOK.MSG.DATA, self.getSandboxName(), routine, operation, opTimestamp, entity, JSON.stringify(doc));\n      runhookManager.callRunhook(routine, entity, operation, doc).then(function(result) {\n        self.logger.trace(constx.RUNHOOK.MSG.RESULT, self.getSandboxName(), routine, operation, opTimestamp, entity, JSON.stringify(result));\n        done && done(null, result);\n      }).catch(function(error) {\n        self.logger.error(constx.RUNHOOK.MSG.ERROR, self.getSandboxName(), routine, operation, opTimestamp, entity, JSON.stringify(doc), JSON.stringify(error));\n        done && done(error, null);\n      }).finally(function() {\n        self.logger.debug(constx.RUNHOOK.MSG.END, self.getSandboxName(), routine, operation, opTimestamp, entity);\n      });\n    } else {\n      self.logger.trace(constx.RUNHOOK.MSG.NOOP, self.getSandboxName(), routine, operation, opTimestamp, entity);\n      done && done(null, {});\n    }\n  };\n\n  var jobQueueOfRoutine = params.jobqueueFactory.getJobQueueMappings();\n  var jobQueueEvents = lodash.pull(lodash.uniq(lodash.values(jobQueueOfRoutine)), 'jobqueue-global');\n  lodash.forEach(jobQueueEvents, function(event) {\n    jobQueue.process(event + '-' + self.getSandboxName(), jobQueueProcess);\n  });\n  jobQueue.process('jobqueue-global' + '-' + self.getSandboxName(), jobQueueProcess);\n\n  self.getJobQueue = function() {\n    return jobQueue;\n  };\n\n  self.getJobQueueOfRoutine = function(routine) {\n    var event = (jobQueueOfRoutine[routine] ? jobQueueOfRoutine[routine] : 'jobqueue-global');\n    return event + '-' + self.getSandboxName();\n  };\n\n  debuglog.isEnabled && debuglog(' - constructor has finished');\n};\n\nService.argumentSchema = {\n  \"id\": \"jobqueueWorker\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"sandboxName\": {\n      \"type\": \"string\"\n    },\n    \"sandboxConfig\": {\n      \"type\": \"object\"\n    },\n    \"profileConfig\": {\n      \"type\": \"object\"\n    },\n    \"generalConfig\": {\n      \"type\": \"object\"\n    },\n    \"loggingFactory\": {\n      \"type\": \"object\"\n    },\n    \"jobqueueFactory\": {\n      \"type\": \"object\"\n    },\n    \"runhookManager\": {\n      \"type\": \"object\"\n    }\n  }\n};\n\nmodule.exports = Service;\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/scripts/command_app-info.js":"'use strict';\n\nvar Promise = require('bluebird');\nvar lodash = require('lodash');\nvar chores = require('../utils/chores.js');\n\nvar commandConfig;\n\nvar commandObject = {\n  info: {\n  \tdescription: 'Display application information',\n    options: []\n  },\n  handler: function(params, ctx) {\n    return Promise.resolve([{\n        type: 'json',\n        title: 'Application Information',\n        data: chores.pickProperty('appinfo', [ctx, this, commandConfig], {})\n    }]);\n  }\n};\n\nmodule.exports = function(params) {\n  commandConfig = params || {};\n  return commandObject;\n};\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/scripts/command_sb-info.js":"'use strict';\n\nvar Promise = require('bluebird');\nvar lodash = require('lodash');\nvar chores = require('../utils/chores.js');\n\nvar commandConfig;\n\nvar commandObject = {\n  info: {\n  \tdescription: 'Display the sandbox information (how many sandboxes, current sandbox name)',\n    options: []\n  },\n  handler: function(params, ctx) {\n    var sandboxManager = chores.pickProperty('sandboxManager', [ctx, this, commandConfig], {});\n    return Promise.resolve(sandboxManager.getServiceHelp());\n  }\n};\n\nmodule.exports = function(params) {\n  commandConfig = params || {};\n  return commandObject;\n};\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/scripts/command_sb-use.js":"'use strict';\n\nvar Promise = require('bluebird');\nvar lodash = require('lodash');\nvar chores = require('../utils/chores.js');\n\nvar commandConfig;\n\nvar commandObject = {\n  info: {\n  \tdescription: 'Set the current sandbox to work',\n    options: [\n      {\n        abbr: 'n',\n        name: 'name',\n        description: 'Name of the new current sandbox',\n        required: true\n      }\n    ]\n  },\n  handler: function(params, ctx) {\n    var promixe;\n    var sandboxName = params['name'];\n    var sandboxManager = chores.pickProperty('sandboxManager', [ctx, this, commandConfig], {});\n    if (sandboxManager.isSandboxAvailable(sandboxName)) {\n      sandboxManager.setSandboxPointer(sandboxName);\n      promixe = Promise.resolve({ currentSandbox: sandboxName });\n    } else {\n      promixe = Promise.reject({ error: 'invalid_sandbox_name' });\n    }\n    return promixe;\n  }\n};\n\nmodule.exports = function(params) {\n  commandConfig = params || {};\n  return commandObject;\n};\n","/home/travis/build/npmtest/node-npmtest-devebot/node_modules/devebot/lib/scripts/command_sys-info.js":"'use strict';\n\nvar Promise = require('bluebird');\nvar lodash = require('lodash');\nvar os = require('os');\n\nvar commandConfig;\n\nvar commandObject = {\n  info: {\n  \tdescription: 'Display the system information (configuration, logger, sandbox)',\n    options: []\n  },\n  handler: function(params, ctx) {\n    return Promise.resolve([{\n      type: 'record',\n      title: 'OS information',\n      label: {\n        os_platform: 'Platform',\n        os_arch: 'Architecture',\n        os_cpus: 'CPUs',\n        os_hostname: 'Hostname',\n        os_network_interface: 'Network',\n        os_totalmem: 'Total memory (MB)',\n        os_freemem: 'Free memory (MB)',\n        os_loadavg: 'Load averages',\n        os_uptime: 'System uptime (h)'\n      },\n      data: {\n        os_platform: os.platform(),\n        os_arch: os.arch(),\n        os_cpus: JSON.stringify(lodash.map(os.cpus(), function(cpu) { \n          return lodash.pick(cpu, ['model', 'speed']);\n        }), null, 2),\n        os_hostname: os.hostname(),\n        os_network_interface: JSON.stringify(os.networkInterfaces(), null, 2),\n        os_totalmem: os.totalmem()/1024/1024,\n        os_freemem: os.freemem()/1024/1024,\n        os_loadavg: JSON.stringify(os.loadavg()),\n        os_uptime: os.uptime()/3600\n      }\n    }]);\n  }\n};\n\nmodule.exports = function(params) {\n  commandConfig = params || {};\n  return commandObject;\n};\n"}